package domain;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import utils.Collections;

/**
 * Represents the board.
 *
 * @author Frederic Everaert
 * @author Gilles Baert
 * @author Jonas De Bruycker
 * @author Sander De Quick
 */
class Board {

    public static final int DIM = 7;
    public static final int NUM_OF_SECTORS = 4;
    public static final int SQUARES_PER_SECTOR = 8;

    private final Map<Region, Integer> REGIONS_PER_TYPE = new HashMap<Region, Integer>() {
        {
            put(Region.SALTMINE, 1);
            put(Region.SETTLEMENT, 4);
            put(Region.GUELTA, 6);
            put(Region.ERG, 12);
            put(Region.MOUNTAIN, 6);
            put(Region.RAG, 12);
            put(Region.FESHFESH, 8);
            put(Region.SALTLAKE, 4);
        }
    };

    private static final int[][] SECTORS
            = {
                {0, 0, 0, -1, 1, 1, 1},
                {0, 0, 0, -1, 1, 1, 1},
                {0, 0, -1, -1, -1, 1, 1},
                {-1, -1, -1, -1, -1, -1, -1},
                {2, 2, -1, -1, -1, 3, 3},
                {2, 2, 2, -1, 3, 3, 3},
                {2, 2, 2, -1, 3, 3, 3}
            };

    private final Square[][] SQUARES;
    private Region[] regionShuffled;
    private int placedSettlements = 0;

    public Board(Model model) {
        SQUARES = new Square[DIM][DIM];
        for (int i = 0; i < DIM; i++) {
            for (int j = 0; j < DIM; j++) {
                SQUARES[i][j] = new Square(model);
            }
        }
    }

    public void initSectors() {
        //eerst moeten alle vakken en het Board object aangemaakt zijn voordat de sectoren veilig ingesteld kunnen worden
        for (int i = 0; i < DIM; i++) {
            for (int j = 0; j < DIM; j++) {
                SQUARES[i][j].setSector(SECTORS[i][j]);
            }
        }
    }

    public void populateBoard() throws InterruptedException {
        regionShuffled = new Region[DIM * DIM - 1];
        int index = 0;
        for (Region r : Region.values()) {
            if (r != Region.SALTMINE && r != Region.SETTLEMENT) {
                int regionPerType = 0;
                while (regionPerType < REGIONS_PER_TYPE.get(r)) {
                    regionShuffled[index] = r;
                    regionPerType++;
                    index++;
                }
            }
        }
        Collections.shuffle(regionShuffled, 1);
        spiralAlgorithm(70);
    }

    private void spiralAlgorithm(int ms) throws InterruptedException {
        String direction = "R";
        int posX = SQUARES.length / 2;
        int posY = SQUARES.length / 2;
        boolean end = false;

        SQUARES[posX][posY].setRegion(Region.SALTMINE);
        int index = 0;

        while (!end) {
            Thread.sleep(ms);
            switch (direction) {
                case "L":
                    posY -= 1;

                    SQUARES[posX][posY].setRegion(regionShuffled[index]);
                    index++;
                    if (SQUARES[posX - 1][posY].getRegion() == null) {
                        direction = "U";
                    }
                    break;
                case "U":
                    posX -= 1;
                    SQUARES[posX][posY].setRegion(regionShuffled[index]);
                    index++;
                    if (SQUARES[posX][posY + 1].getRegion() == null) {
                        direction = "R";
                    }
                    break;
                case "R":
                    posY += 1;
                    if (posY >= SQUARES.length) {
                        direction = "";
                        end = true;
                        break;
                    }
                    SQUARES[posX][posY].setRegion(regionShuffled[index]);
                    index++;
                    if (SQUARES[posX + 1][posY].getRegion() == null) {
                        direction = "D";
                    }
                    break;
                case "D":
                    posX += 1;
                    SQUARES[posX][posY].setRegion(regionShuffled[index]);
                    index++;
                    if (SQUARES[posX][posY - 1].getRegion() == null) {
                        direction = "L";
                    }
                    break;

            }
        }
    }

    public void placeSettlement(Player player, int x, int y) throws UnsupportedOperationException, IllegalArgumentException {
        if (x < 0 || x > Board.DIM || y < 0 || y > Board.DIM) {
            throw new IllegalArgumentException("Illegal coordinates, please specify x and y coordinates between 0 and " + Board.DIM);
        }
        if (placedSettlements > REGIONS_PER_TYPE.get(Region.SETTLEMENT) - 1) {
            throw new UnsupportedOperationException("Maximum number of settlements placed");
        }
        if (SQUARES[x][y].getSector() != player.getSector()) {
            throw new IllegalArgumentException("Square not part of " + player.getName() + "'s sector");
        } else {
            SQUARES[x][y].setRegion(Region.SETTLEMENT);
            SQUARES[x][y].setPlayer(player);
            SQUARES[x][y].setCamels(10);
            placedSettlements++;
        }
    }

//    public void resetRegionValues() {
////        for (int i = 0; i < SQUARES.length; i++) {
////            for (int j = 0; j < SQUARES[i].length; j++) {
////                setEconValueOfSquare(i, j, SQUARES[i][j].getRegion().getCurrentEconValue());
////                setStratValueOfSquare(i, j, SQUARES[i][j].getRegion().getCurrentStratValue());
////            }
////        }
//    }
//    public void setEconValueOfSquare(int x, int y, int econValue) {
//        SQUARES[x][y].setEconValue(econValue);
//    }
//    
//    public void setStratValueOfSquare(int x, int y, int stratValue) {
//        SQUARES[x][y].setStratValue(stratValue);
//    }
    public Square[] getSquaresByRegion(Region region) {
        Square[] squaresByRegion = new Square[REGIONS_PER_TYPE.get(region)];
        for (int i = 0; i < SQUARES.length; i++) {
            for (int j = 0; j < SQUARES[i].length; j++) {
                if (SQUARES[i][j].getRegion().equals(region)) {
                    squaresByRegion[i] = SQUARES[i][j];
                }
            }
        }
        return squaresByRegion;
    }

    public Square[][] getSquares() {
        return SQUARES;
    }

    public static int[][] getSectors() {
        return SECTORS;
    }

    public List<int[]> getAdjacentMoveSquares(int x, int y) {
        if (x < 0 || x >= DIM || y < 0 || y >= DIM) {
            throw new IllegalArgumentException("Illegal coordinates, please specify x and y coordinates between 0 and " + (Board.DIM - 1));
        }
        List<int[]> sq = new ArrayList<>();
        int[] e;
        for (int i = x - 1; i <= x + 1 && i < DIM; i++) {
            for (int j = y - 1; j <= y + 1 && j < DIM; j++) {
                if (i >= 0 && j >= 0 && SQUARES[i][j].getRegion() != Region.SALTLAKE) {
                    if (i != x || j != y) {
                        e = new int[2];
                        e[0] = i;
                        e[1] = j;
                        sq.add(e);
                    }
                }
            }
        }
        return sq;
    }

}
