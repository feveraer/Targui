package gui;

import domain.DomainController;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyEvent;
import java.sql.SQLException;
import java.util.Locale;
import java.util.ResourceBundle;
import javax.swing.JMenu;
import javax.swing.JMenuBar;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.KeyStroke;

/**
 *
 * @author Frederic
 */
public class Menu extends JMenuBar {

    private DomainController dc;
    private StartJFrame frmStart;
    private JMenu file;
    private JMenuItem newGame;
    private JMenuItem loadGame;
    private JMenuItem saveGame;
    private JMenuItem exit;
    private ResourceBundle bundle;

    public Menu(DomainController dc, StartJFrame frmStart) {
        this.dc = dc;
        this.frmStart = frmStart;
        bundle = ResourceBundle.getBundle("properties/game", Locale.ENGLISH);
        initComponents();
    }

    public void setLanguage(String lang) {
        Locale locale = new Locale(lang);
        bundle = ResourceBundle.getBundle("properties/game", locale);
    }

    private void initComponents() {
        file = new JMenu(bundle.getString("menu.file"));
        file.setMnemonic(KeyEvent.VK_F);
        add(file);

        newGame = new JMenuItem(bundle.getString("menu.new"));
        newGame.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_N, ActionEvent.CTRL_MASK));
        file.add(newGame);
        loadGame = new JMenuItem(bundle.getString("menu.load"));
        loadGame.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_L, ActionEvent.CTRL_MASK));
        file.add(loadGame);
        saveGame = new JMenuItem(bundle.getString("menu.save"));
        saveGame.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_S, ActionEvent.CTRL_MASK));
        file.add(saveGame);
        exit = new JMenuItem(bundle.getString("menu.exit"));
        exit.setAccelerator(KeyStroke.getKeyStroke(KeyEvent.VK_F4, ActionEvent.ALT_MASK));
        file.add(exit);

        newGame.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                newGameActionPerformed();
            }
        });
        loadGame.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                loadGameActionPerformed();
            }
        });
        saveGame.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                saveGameActionPerformed();
            }
        });
        exit.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                exitActionPerformed();
            }
        });
    }

    public void newGameSetEnabled(boolean flag) {
        newGame.setEnabled(flag);
    }

    public void loadGameSetEnabled(boolean flag) {
        loadGame.setEnabled(flag);
    }

    public void saveGameSetEnabled(boolean flag) {
        saveGame.setEnabled(flag);
    }

    private void newGameActionPerformed() {
        frmStart.btnPlayEnabled(false);
        frmStart.btnSetRoundsEnabled(false);
        dc.clearPlayerRepository();
        dc.setBoardFilled(false);
        dc.clearGame();
        frmStart.setLblCurrentTurn("");
        frmStart.setLblNumberOfTurns("");
        frmStart.setBtnPlayText(bundle.getString("btn.nextRound"));
        frmStart.resetBoard();
        frmStart.resetSettlementsPlaced();
        frmStart.btnNewGameSetEnabled(false);
        frmStart.btnLoadSetEnabled(false);
        frmStart.btnSaveSetEnabled(false);
        new CreatePlayersJFrame(frmStart, dc);
    }

    private void loadGameActionPerformed() {
        frmStart.registerGameAsListener();
        frmStart.registerBoardAsListener();
        try {
            new LoadGameJFrame(dc, frmStart, dc.getSavedGameNames());
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, bundle.getString("db.failed"), bundle.getString("main.error"), JOptionPane.ERROR_MESSAGE);
        } catch (UnsupportedOperationException exp) {
            JOptionPane.showMessageDialog(null, bundle.getString(exp.getMessage()), bundle.getString("exp.incorrectInput"), JOptionPane.ERROR_MESSAGE);
        }
    }

    private void saveGameActionPerformed() {
        boolean exitState = false;
        while (!exitState) {
            String saveName = JOptionPane.showInputDialog(bundle.getString("db.unique"));
            if (saveName == null) {
                exitState = true;
            } else if (saveName.isEmpty()) {
                exitState = false;
                JOptionPane.showMessageDialog(null, bundle.getString("exp.nameNotEmpty"), bundle.getString("exp.incorrectInput"), JOptionPane.ERROR_MESSAGE);
            } else {
                try {
                    dc.saveGame(saveName);
                    exitState = true;
                } catch (SQLException exp) {
                    exitState = true;
                    JOptionPane.showMessageDialog(null, bundle.getString("db.failed"), bundle.getString("main.error"), JOptionPane.ERROR_MESSAGE);
                } catch (IllegalArgumentException exp) {
                    String[] message = exp.getMessage().split(" ");
                    JOptionPane.showMessageDialog(null, String.format(bundle.getString(message[0]), message[1]), bundle.getString("exp.incorrectInput"), JOptionPane.ERROR_MESSAGE);
                }
            }
        }
    }

    private void exitActionPerformed() {
        System.exit(0);
    }
}
