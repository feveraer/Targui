package ui;

import java.util.Scanner;
import domain.DomainController;
import java.util.InputMismatchException;
import java.util.List;

/**
 *
 * @author Jonas
 */
public class UseCase5 {

    public static void main(String[] args) {
        Scanner input = new Scanner(System.in);
        DomainController dc = new DomainController();
        UseCase1 uc1 = new UseCase1();
        UseCase2 uc2 = new UseCase2();
        UseCase3 uc3 = new UseCase3();
        UseCase4 uc4 = new UseCase4();
        UseCase5 uc5 = new UseCase5();
        boolean[] geldig = new boolean[4];
        
        int[][] sectors = dc.getSectors();
        
        uc1.showSectors(dc);
        
        uc2.createPredefinedPlayers(dc);
        
        uc1.showPlayers(dc);
        
  //Use case 2
        
        uc2.populateBoard(dc);
        uc2.addGamersToGame(dc, uc2);
        
//Show populated board
        uc2.showBoard(dc);
        
        //Request settlement position + insert settlement position
        
        uc3.placePredefinedSettlements(dc, uc2);

        uc2.showBoard(dc);
        
//Use Case 3 Begin  
        
        System.out.print("\n\n\n");
        uc3.enterNumberOfRounds(dc, input);
        

        do
        {
            System.out.print("Next round? Enter Y: ");
            String next = input.next();
            if(next.toLowerCase().charAt(0) == 'y'|| next.isEmpty())
            {
                String[] turn = dc.getNextTurn();
                System.out.printf("\nRound %d\nTurn %d of %d\n",
                    dc.getCurrentRoundNumber(),
                    dc.getCurrentTurnNumber(),
                    dc.getNumberOfTurns());
                
                //UC4 noodlotskaart?
                
                if(turn[0] == null)
                    System.out.println(turn[1]);
                else
                {
                    System.out.printf("It's %s's turn.\n", turn[0]);
                    
                    
        
                    uc2.showBoard(dc);
                        
                        // select + getAdjacentSquares
                    boolean[] check = new boolean[4];
                    int xCo=0, yCo=0, xTo=0, yTo=0, camels=0;
                    int buyCamels=0;
                    
                    while(!check[0])
                    {
                        uc5.selectSquare(dc, check, input, turn);
                    }
                    
                    
                    int[][] adjecent = dc.getAdjacentSquares(xCo, yCo);

                    uc5.showAdjacentSquares(dc, adjecent);

                    while(!check[1])
                    {
                        uc5.startMoveTo(dc, input, adjecent, check, xCo, yCo);
                    }
                    
                             
                        //Show board before buying camels
                       uc2.showBoard(dc);
                    
                    
                    while(!check[2])
                    {
                        uc5.startBuyCamels(dc, input, uc2, turn, check);
                        
                        
                    }

                    
                    

                }//end of 'else'
                    
                
                
            //toon het spel
                //onderdeel use case 4
        uc2.showBoard(dc);
        
        //onderdeel use case 4
        if(dc.getCurrentTurnNumber() == dc.getNumberOfTurns())
                {
                    uc3.evaluateRound(dc, uc2);
                }
            }
            else
                System.exit(0);
        }
        while(dc.getVictors().isEmpty());
        
        uc3.showVictor(dc);
        
        //print board
        uc2.showBoard(dc);
        
    }//einde main
    
    
    
    public void selectSquare(DomainController dc, boolean[] check, Scanner input, String[] turn)
    {
        try {
            String[][][] boardUpdate = dc.getBoard();

            System.out.println("Select a square under your command.");

            System.out.print("Enter x coordinate: ");
            int xCo = Integer.parseInt(input.nextLine()) - 1;
            System.out.print("Enter y coordinate: ");
            int yCo = Integer.parseInt(input.nextLine()) - 1;
            if (!boardUpdate[xCo][yCo][4].equals(turn[0])) {
                System.err.println("You do not own this square!");
            } else {
                check[0] = true;
            }
        } catch (NumberFormatException nfe) {
            System.err.println("Enter a number from 1 to 7!");
        }
    }//einde selectSquare
    
    
    
    public void showAdjacentSquares(DomainController dc, int[][] adjecent)
    {
        for (int i = 0; i < adjecent.length; i++) {
            System.out.printf("Adjacent square coordinates: x=%d y=%d\n", adjecent[i][0] + 1, adjecent[i][1] + 1);
        }
    }//einde showAdjacentSquares
    
    
    
    public void startMoveTo(DomainController dc, Scanner input, int[][] adjecent, boolean[] check, int xCo, int yCo)
    {
        try {
            System.out.println("Enter the coordinates of the square you want to move to.");

            System.out.print("Enter x coordinate of destination: ");
            int xTo = Integer.parseInt(input.nextLine()) - 1;
            System.out.print("Enter y coordinate of destination: ");
            int yTo = Integer.parseInt(input.nextLine()) - 1;
            System.out.print("Enter the amount of camels you want to move: ");
            int camels = Integer.parseInt(input.nextLine());

            for (int i = 0; i < adjecent.length; i++) {
                if (adjecent[i][0] == xTo && adjecent[i][1] == yTo) {
                    dc.move(xCo, yCo, xTo, yTo, camels);
                    check[1] = true;
                    break;
                }

            }
            if (!check[1]) {
                System.err.println("Enter the coordinates of an adjacent square!");
            }

        } catch (NumberFormatException nfe) {
            System.err.println("Please enter a number!");
        } catch (IllegalArgumentException iae) {
            System.err.println(iae.getMessage());
        }
    }//einde startMoveTo
    
    public void startBuyCamels(DomainController dc, Scanner input, UseCase2 uc2, String[] turn, boolean[] check)
    {
        try {
            System.out.print("Enter the amount of camels you want to buy: ");
            int buyCamels = Integer.parseInt(input.nextLine());

                            //toont gebieden waarop kamelen geplaatst kunnen worden
            uc2.showBoard(dc);

            //enter coordinates of place where you want to put your bought camels
            System.out.println("On which square do you want to place your bought camels?");
            System.out.print("Enter x Coordinate: ");
            int buyXCo = Integer.parseInt(input.nextLine()) - 1;
            System.out.print("Enter y COordinate: ");
            int buyYCo = Integer.parseInt(input.nextLine()) - 1;

            //nieuw
            String[][][] boardUpdate = dc.getBoard();

            if (!boardUpdate[buyXCo][buyYCo][4].equals(turn[0])) {
                System.err.println("You do not own this square!");
            } else {
                dc.purchaseCamels(buyXCo, buyYCo, buyCamels);
                check[2] = true;
            }

        } catch (NumberFormatException nfe) {
            System.err.println("Enter a number!");
        } catch (IllegalArgumentException iae) {
            System.err.println(iae.getMessage());
        }
    }

}
