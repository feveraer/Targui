package gui;

import domain.DomainController;
import java.awt.FlowLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/**
 *
 * @author Frederic
 */
public class GameJPanel extends JPanel implements ChangeListener {

    private BoardJPanel pnlBoard;
    private JButton btnInitBoard;
    private JButton btnSetRounds;
    private JButton btnPlay;
    private JLabel lblNumberOfRounds;
    private JLabel lblCurrentRound;
    private JLabel lblNumberOfTurns;
    private JLabel lblCurrentTurn;
    private JScrollPane scrBoardInfo;
    private JTextArea txaBoardInfo;
    private DomainController dc;

    public GameJPanel(DomainController dc) {
        this.dc = dc;
        initComponents();
    }

    private void initComponents() {
        pnlBoard = new BoardJPanel(dc);
        scrBoardInfo = new JScrollPane();
        txaBoardInfo = new JTextArea();
        txaBoardInfo.setText("");
        txaBoardInfo.setEditable(false);
        txaBoardInfo.setColumns(30);
        txaBoardInfo.setRows(30);
        scrBoardInfo.setViewportView(txaBoardInfo);
        btnInitBoard = new JButton("Initialize board");
        btnInitBoard.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                btnInitBoardActionPerformed();
            }
        });
        btnInitBoard.setEnabled(false);
        btnSetRounds = new JButton("Set rounds");
        btnSetRounds.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                btnSetRoundsActionPerformed();
            }
        });
        btnSetRounds.setEnabled(false);
        btnPlay = new JButton("Play");
        btnPlay.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                btnPlayActionPerformed();
            }
        });
        btnPlay.setEnabled(false);
        lblNumberOfRounds = new JLabel();
        lblCurrentRound = new JLabel();
        lblNumberOfTurns = new JLabel();
        lblCurrentTurn = new JLabel();

        setLayout(new FlowLayout());
        add(pnlBoard);
        add(scrBoardInfo);
        add(btnInitBoard);
        add(btnSetRounds);
        add(btnPlay);
        add(lblNumberOfRounds);
        add(lblCurrentRound);
        add(lblNumberOfTurns);
        add(lblCurrentTurn);
        setVisible(true);
    }

    public void activateBtnInitBoard() {
        btnInitBoard.setEnabled(true);
    }

    private void btnInitBoardActionPerformed() {
        String[][] allPlayers = dc.getPlayers();
        String[] allPlayerNames = new String[allPlayers.length];
        for (int i = 0; i < allPlayers.length; i++) {
            allPlayerNames[i] = allPlayers[i][0];
        }
        dc.newGame(allPlayerNames);
        pnlBoard.registerAsListener();
        dc.initBoard();
        new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    dc.populateBoard();
                    int sqX;
                    int sqY;
                    String[][] players = dc.getGamePlayers();

                    boolean[] juisteInvoer = {false, false, false, false};
                    for (int i = 0; i < players.length; i++) {
                        while (!juisteInvoer[i]) {
                            try {
                                sqX = Integer.parseInt(JOptionPane.showInputDialog("Enter X coordinate of settlement for '" + players[i][0] + "'"));
                                sqY = Integer.parseInt(JOptionPane.showInputDialog("Enter Y coordinate of settlement for '" + players[i][0] + "'"));
                                dc.placeSettlement(players[i][0], sqX, sqY);
                                juisteInvoer[i] = true;
                            } catch (IllegalArgumentException exp) {
                                JOptionPane.showMessageDialog(null, exp.getMessage(), "Incorrect input", JOptionPane.ERROR_MESSAGE);
                            }
                        }
                    }
                } catch (InterruptedException ex) {
                    Logger.getLogger(GameJPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
                btnSetRounds.setEnabled(true);
            }
        }).start();
        btnInitBoard.setEnabled(false);
    }

    private void btnSetRoundsActionPerformed() {
        boolean correctInput = false;
        while (!correctInput) {
            try {
                dc.setupRounds(Integer.parseInt(JOptionPane.showInputDialog("Enter number of rounds")));
                correctInput = true;
            } catch (NumberFormatException exp) {
                JOptionPane.showMessageDialog(null, "Enter a number, idiot", "Incorrect input", JOptionPane.ERROR_MESSAGE);
            } catch (IllegalArgumentException exp) {
                JOptionPane.showMessageDialog(null, exp.getMessage(), "Incorrect input", JOptionPane.ERROR_MESSAGE);
            }
        }
        btnSetRounds.setEnabled(false);
        lblNumberOfRounds.setText(Integer.toString(dc.getNumberOfRounds()));
        lblCurrentRound.setText(Integer.toString(dc.getCurrentRound()));
        lblNumberOfTurns.setText(Integer.toString(dc.getNumberOfTurns()));
        lblCurrentTurn.setText(Integer.toString(dc.getCurrentTurn()));
        dc.addRepoChangeListener(this);
        dc.addGameChangeListener(this);
        setBoardInfo();
        btnPlay.setEnabled(true);
    }
    
    private void btnPlayActionPerformed() {
        JOptionPane.showMessageDialog(null, dc.getNextTurn());
        lblCurrentRound.setText(Integer.toString(dc.getCurrentRound()));
        lblNumberOfTurns.setText(Integer.toString(dc.getNumberOfTurns()));
        lblCurrentTurn.setText(Integer.toString(dc.getCurrentTurn()));
    }

    private void setBoardInfo() {
        String boardInfoTxt = "";
        String[][][] board = dc.getBoard();
        int[][][] regionValues = dc.getRegionValuesOfRound();
        for (int i = 0; i < 7; i++) {
            for (int j = 0; j < 7; j++) {
                boardInfoTxt += String.format("[%s, %s, %s, %d, %s, %s]  ", 
                        board[i][j][0], regionValues[i][j][0], regionValues[i][j][1], 
                        Integer.parseInt(board[i][j][1]) + 1, board[i][j][2], board[i][j][3]);
            }
            boardInfoTxt += "\n\n";
        }
        txaBoardInfo.setText(boardInfoTxt);
    }
    
    @Override
    public void stateChanged(ChangeEvent e) {
        setBoardInfo();
    }
}
