package domein;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 * Representeert één volledig spel.
 *
 * @author Frederic Everaert
 * @author Gilles Baert
 * @author Jonas De Bruycker
 * @author Sander De Quick
 */
public class Spel {
    
    public static enum KLEUREN {
        ROOD,
        GEEL,
        BLAUW,
        GROEN;
    }
    
    private final Spelbord spelbord = new Spelbord();
    private final int MAX_AANTAL_RONDEN = 16;
    private final Speler[] spelers;
    
    private Ronde[] ronden;
    private List<Actie> geschuddeNoodlotskaarten;
    private Actie[] noodlotskaartenActies;
    
    private boolean spelbordGevuld = false;

    public Spel(Speler[] spelers) {
        this.spelers = spelers;
        vulActies();
    }

    /**
     * Configuratie van het spelbord.
     */
    public void vulSpelbord() {
        spelbord.vulSpelbord();
        spelbordGevuld = true;
    }

    /**
     * Plaatst een gebiedskaart van het type nederzetting op een specifiek vak.
     *
     * @param speler Spelerobject
     * @param vakX X-coördinaat van het gewenste vak
     * @param vakY Y-coördinaat van het gewenste vak
     */
    public void plaatsNederzetting(Speler speler, int vakX, int vakY) {
        spelbord.plaatsNederzetting(speler, vakX, vakY);
    }

    /**
     * Legt het aantal ronden vast.
     *
     * @param aantalRonden
     */
    public void kiesAantalRonden(int aantalRonden) {
        if (aantalRonden < 0 || aantalRonden > MAX_AANTAL_RONDEN) {
            throw new IllegalArgumentException("Gelieve een geldig aantal ronden op te geven");
        } else {
            ronden = new Ronde[aantalRonden];
        }
        bepaalNoodlotskaarten();
    }

    /**
     * Maak verschillende acties voor noodlotskaarten.
     *
     * @param spelers
     */
    private void vulActies() {
        noodlotskaartenActies = new Actie[16];
        noodlotskaartenActies[0] = new Actie() {
            @Override
            public String doeActie() {
                Vak[][] vakken = spelbord.getVakken();
                vakken[vakken.length / 2][vakken.length / 2].setAantalKamelen(0);
                return "De Haussa, een vreemde, vijandige stam, overvalt de centrale zoutwinplaats en steelt er alle kamelen.";
            }
        };
        noodlotskaartenActies[1] = new Actie() {
            @Override
            public String doeActie() {
                Vak[][] vakken = spelbord.getVakken();
                for (int i = 0; i < vakken.length; i++) {
                    for (int j = 0; j < vakken[i].length; j++) {
                        if (vakken[i][j].getGebied().equals(Gebiedskaart.BERG)) {
                            vakken[i][j].getGebied().setEconWaarde(3);
                        }
                    }
                }
                return "In de bergen is zilver ontdekt. De schatting aan het eind van deze ronde is dan ook 3 voor elk bergengebied.";
            }
        };
        noodlotskaartenActies[2] = new Actie() {
            @Override
            public String doeActie() {
                Vak[][] vakken = spelbord.getVakken();
                for (int i = 0; i < vakken.length; i++) {
                    for (int j = 0; j < vakken[i].length; j++) {
                        if (vakken[i][j].getGebied().equals(Gebiedskaart.NEDERZETTING)) {
                            for (int k = 0; k < spelers.length; k++) {
                                if (vakken[i][j].getMarkeringsteken().equals(spelers[k].getKleur())) {
                                    spelers[k].setGeldstukken(0);
                                }
                            }
                        }
                    }
                }
                return "Een vijandelijke stam overvalt alle nederzettingen en gaat er met al het goud en zilver vandoor. Stammen zonder nederzettingen behouden hun geld.";
            }
        };
        noodlotskaartenActies[3] = new Actie() {
            @Override
            public String doeActie() {
                Vak[][] vakken = spelbord.getVakken();
                for (int i = 0; i < vakken.length; i++) {
                    for (int j = 0; j < vakken[i].length; j++) {
                        if (vakken[i][j].getGebied().equals(Gebiedskaart.GUELTA)) {
                            vakken[i][j].setAantalKamelen(vakken[i][j].getAantalKamelen() - 10);
                        }
                    }
                }
                return "Het water in de guelta’s is vergiftigd. Van de eventueel aanwezige kamelen sterven er in iedere guelta 10.";
            }
        };
        noodlotskaartenActies[4] = new Actie() {
            @Override
            public String doeActie() {
                Vak[][] vakken = spelbord.getVakken();
                for (int i = 0; i < vakken.length; i++) {
                    for (int j = 0; j < vakken[i].length; j++) {
                        if (vakken[i][j].getGebied().equals(Gebiedskaart.ERG)) {
                            vakken[i][j].getGebied().setStratWaarde(3);
                        }
                    }
                }
                return "Onder invloed van klimatologische omstandigheden, zijn de kenmerken van een ‘erg’ gewijzigd. De resterende beurten van deze ronde heeft iedere ‘erg’ een strategische waarde van 3.";
            }
        };
        noodlotskaartenActies[5] = new Actie() {
            @Override
            public String doeActie() {
                Vak[][] vakken = spelbord.getVakken();
                for (int i = 0; i < vakken.length; i++) {
                    for (int j = 0; j < vakken[i].length; j++) {
                        if (vakken[i][j].getGebied().equals(Gebiedskaart.GUELTA)) {
                            vakken[i][j].setAantalKamelen(vakken[i][j].getAantalKamelen() + 5);
                        }
                    }
                }
                return "Het is voorjaar. In iedere guelta worden 5 kamelen geboren.";
            }
        };
        noodlotskaartenActies[6] = new Actie() {
            @Override
            public String doeActie() {
                Vak[][] vakken = spelbord.getVakken();
                for (int i = 0; i < vakken.length; i++) {
                    for (int j = 0; j < vakken[i].length; j++) {
                        if (vakken[i][j].getGebied().equals(Gebiedskaart.REG)) {
                            vakken[i][j].setAantalKamelen(vakken[i][j].getAantalKamelen() - 5);
                        }
                    }
                }
                return "Door hevige regenval verdrinken in iedere reg 5 kamelen. Die verdwijnen uit het spel.";
            }
        };
        noodlotskaartenActies[7] = new Actie() {
            @Override
            public String doeActie() {
                Vak[][] vakken = spelbord.getVakken();
                for (int i = 0; i < vakken.length; i++) {
                    for (int j = 0; j < vakken[i].length; j++) {
                        if (vakken[i][j].getAantalKamelen() > 0) {
                            vakken[i][j].setAantalKamelen(vakken[i][j].getAantalKamelen() - 1);
                        }
                    }
                }
                return "Een vijandige stam valt het gehele gebied binnen. Van elk gebied met kamelen sneuvelt er één.";
            }
        };
        noodlotskaartenActies[8] = new Actie() {
            @Override
            public String doeActie() {
                Vak[][] vakken = spelbord.getVakken();
                for (int i = 0; i < vakken.length; i++) {
                    for (int j = 0; j < vakken[i].length; j++) {
                        if (vakken[i][j].getGebied().equals(Gebiedskaart.NEDERZETTING)) {
                            vakken[i][j].setAantalKamelen(vakken[i][j].getAantalKamelen() / 2);
                        }
                    }
                }
                return "De kamelenpest breekt uit. De helft van alle kamelen in de nederzetting sterft (naar beneden afronden).";
            }
        };
        noodlotskaartenActies[9] = new Actie() {
            @Override
            public String doeActie() {
                for (int k = 0; k < spelers.length; k++) {
                    spelers[k].setGeldstukken(spelers[k].getGeldstukken() + 10);
                }
                return "In een gezamenlijke actie van alle stammen wordt een grote karavaan overvallen. Iedere stam ontvangt 10 zilverstukken.";
            }
        };
        noodlotskaartenActies[10] = new Actie() {
            @Override
            public String doeActie() {
                Vak[][] vakken = spelbord.getVakken();
                for (int i = 0; i < vakken.length; i++) {
                    for (int j = 0; j < vakken[i].length; j++) {
                        if (vakken[i][j].getGebied().equals(Gebiedskaart.GUELTA)) {
                            if (vakken[i][j].getAantalKamelen() >= 15) {
                                vakken[i][j].setAantalKamelen(15);
                            }
                        }
                    }
                }
                return "Er heerst droogte in de Sahara. In iedere guelta is er voor maximaal 15 kamelen te drinken. Als er meer kamelen in een guelta staan, dan moeten die terug in de doos.";
            }
        };
        noodlotskaartenActies[11] = new Actie() {
            @Override
            public String doeActie() {
                Vak[][] vakken = spelbord.getVakken();
                for (int i = 0; i < vakken.length; i++) {
                    for (int j = 0; j < vakken[i].length; j++) {
                        if (vakken[i][j].getGebied().equals(Gebiedskaart.ERG)) {
                            vakken[i][j].setAantalKamelen(vakken[i][j].getAantalKamelen() - 3);
                        }
                    }
                }
                return "Hevige zandstormen teisteren de Sahara. In iedere ‘erg’ verdwalen 3 kamelen. Ze verdwijnen uit het spel.";
            }
        };
        noodlotskaartenActies[12] = new Actie() {
            @Override
            public String doeActie() {
                Vak[][] vakken = spelbord.getVakken();
                for (int i = 0; i < vakken.length; i++) {
                    for (int j = 0; j < vakken[i].length; j++) {
                        if (vakken[i][j].getGebied().equals(Gebiedskaart.NEDERZETTING)) {
                            if (vakken[i][j].getMarkeringsteken().equals(Spel.KLEUREN.BLAUW.name())) {
                                vakken[i][j].setAantalKamelen(vakken[i][j].getAantalKamelen() + 10);
                            }
                        }
                    }
                }
                return "De Kei Ress (blauw) krijgt hoog bezoek en ontvangt een geschenk: 10 kamelen in de nederzetting.";
            }
        };
        noodlotskaartenActies[13] = new Actie() {
            @Override
            public String doeActie() {
                Vak[][] vakken = spelbord.getVakken();
                for (int i = 0; i < vakken.length; i++) {
                    for (int j = 0; j < vakken[i].length; j++) {
                        if (vakken[i][j].getGebied().equals(Gebiedskaart.NEDERZETTING)) {
                            if (vakken[i][j].getMarkeringsteken().equals(Spel.KLEUREN.ROOD.name())) {
                                vakken[i][j].setAantalKamelen(vakken[i][j].getAantalKamelen() + 10);
                            }
                        }
                    }
                }
                return "De Kei Ibakan (rood) krijgt hoog bezoek en ontvangt een geschenk: 10 kamelen in de nederzetting.";
            }
        };
        noodlotskaartenActies[14] = new Actie() {
            @Override
            public String doeActie() {
                Vak[][] vakken = spelbord.getVakken();
                for (int i = 0; i < vakken.length; i++) {
                    for (int j = 0; j < vakken[i].length; j++) {
                        if (vakken[i][j].getGebied().equals(Gebiedskaart.NEDERZETTING)) {
                            if (vakken[i][j].getMarkeringsteken().equals(Spel.KLEUREN.GROEN.name())) {
                                vakken[i][j].setAantalKamelen(vakken[i][j].getAantalKamelen() + 10);
                            }
                        }
                    }
                }
                return "De Kei Ahaggar (groen) krijgt hoog bezoek en ontvangt een geschenk: 10 kamelen in de nederzetting.";
            }
        };
        noodlotskaartenActies[15] = new Actie() {
            @Override
            public String doeActie() {
                Vak[][] vakken = spelbord.getVakken();
                for (int i = 0; i < vakken.length; i++) {
                    for (int j = 0; j < vakken[i].length; j++) {
                        if (vakken[i][j].getGebied().equals(Gebiedskaart.NEDERZETTING)) {
                            if (vakken[i][j].getMarkeringsteken().equals(Spel.KLEUREN.GEEL.name())) {
                                vakken[i][j].setAantalKamelen(vakken[i][j].getAantalKamelen() + 10);
                            }
                        }
                    }
                }
                return "De Kei Ajjer (geel) krijgt hoog bezoek en ontvangt een geschenk: 10 kamelen in de nederzetting.";
            }
        };
        
    }

    /**
     * Bepaalt array van noodlotskaarten a.d.h.v. het aantal gekozen ronden en
     * schud deze.
     */
    private void bepaalNoodlotskaarten() {
        geschuddeNoodlotskaarten = new ArrayList<>();
        for (int i = 0; i < ronden.length; i++) {
            geschuddeNoodlotskaarten.add(noodlotskaartenActies[i]);
        }
        Collections.shuffle(geschuddeNoodlotskaarten);
    }

    /**
     *
     * @return 2D array representatie van het spelbord
     */
    public Spelbord getSpelbord() {
        return spelbord;
    }

    /**
     *
     * @return is het spelbord al opgevuld of niet
     */
    public boolean isSpelbordGevuld() {
        return spelbordGevuld;
    }
    
}
