package domein;

import java.util.List;

/**
 * Domeincontroller van Targui.
 *
 * Het is de verantwoordelijkheid van de client dat maakSpelerAan() nooit voor
 * startNieuwSpel() wordt aangeroepen.
 *
 * @author Frederic Everaert
 * @author Gilles Baert
 * @author Jonas De Bruycker
 * @author Sander De Quick
 */
public class Domeincontroller {

    private final SpelerRepository repo = new SpelerRepository();
    private Spel spel;

    /**
     * Initialiseert een nieuw spel, geef alle aangemaakte spelers mee.
     */
    public void startNieuwSpel() {
        spel = new Spel(repo.getSpelers());
    }

    /**
     * Configuratie van het spelbord.
     */
    public void vulSpelbord() {
        spel.vulSpelbord();
    }

    /**
     * Maakt een nieuwe speler aan.
     *
     * @param naam Gewenste naam, geen nullstring. @see Speler
     * @param kleur Gewenste kleur, moet bestaande kleur zijn. @see Kleuren
     * @param sector Gewenste sector, moet bestaande sector zijn. @see Sector
     */
    public void maakSpelerAan(String naam, String kleur, int sector) throws IllegalArgumentException {
        if (sector < 0 || sector > Spelbord.AANTAL_SECTOREN - 1) {
            throw new IllegalArgumentException("Gelieve een correcte sector op te geven.");
        } else {
            Sector s = spel.getSpelbord().getSectoren()[sector];
            repo.maakSpelerAan(naam, kleur, s);
        }
    }

    /**
     * Plaatst een gebiedskaart van het type nederzetting op een specifiek vak.
     *
     * @param spelerNr Nummer van de speler
     * @param vakX X-coördinaat van het gewenste vak
     * @param vakY Y-coördinaat van het gewenste vak
     */
    public void plaatsNederzetting(int spelerNr, int vakX, int vakY) throws IllegalArgumentException {
        if (spelerNr < 0 || spelerNr > 3) {
            throw new IllegalArgumentException("Gelieve een geldig spelernummer op te geven.");
        } else {
            Speler[] spelers = repo.getSpelers();
            spel.plaatsNederzetting(spelers[spelerNr], vakX, vakY);
            spelers[spelerNr].addVak(spel.getSpelbord().getVakken()[vakX][vakY]);
        }
    }

    /**
     * Legt het aantal ronden vast.
     *
     * @param aantalRonden
     */
    public void kiesAantalRonden(int aantalRonden) {
        spel.kiesAantalRonden(aantalRonden);
    }

    public void speelRonde() {
        spel.speelRonde();
    }
    
    public void speelBeurt() {
        spel.speelBeurt();
    }
    
    public String[][] getAdjecenteVakken(int vakX, int vakY) {
        spel.getSpelbord().getAdjecenteVakken(vakX, vakY);
        //TODO converteer vakken naar string[][]
        return null;
    }

    public String[][] getVakken(int spelerNr) {
        List<Vak> vakken = repo.getSpelers()[spelerNr].getVakken();
        String[][] res = new String[vakken.size()][Spelbord.AANTAL_ATTR];
        for (int i = 0; i < res.length; i++) {
            for (int j = 0; j < Spelbord.AANTAL_ATTR; j++) {
                res[i][0] = vakken.get(i).getGebied().name();
                res[i][1] = Integer.toString(vakken.get(i).getSector().getSectorNr());
                res[i][2] = vakken.get(i).getSpeler().getKleur();
                res[i][3] = Integer.toString(vakken.get(i).getAantalKamelen());
            }
        }
        return res;
    }

    /**
     * Retourneert het huidig spelobject. De volgorde van de attributen is:
     * gebiedskaart, sector , markeringsteken, aantal kamelen.
     *
     * @return 3D array van het spelbord en relevante attributen.
     */
    public String[][][] geefSpel() {
        if (!spel.isSpelbordGevuld()) {
            Vak[][] spelbord = spel.getSpelbord().getVakken();
            String[][][] res = new String[Spelbord.DIM][Spelbord.DIM][1];
            for (int i = 0; i < res.length; i++) {
                for (int j = 0; j < res[i].length; j++) {
                    try {
                        res[i][j][0] = Integer.toString(spelbord[i][j].getSector().getSectorNr());
                    } catch (NullPointerException e) {
                        res[i][j][0] = "-1";
                    }
                }
            }
            return res;
        } else {
            Vak[][] spelbord = spel.getSpelbord().getVakken();
            String[][][] res = new String[Spelbord.DIM][Spelbord.DIM][Spelbord.AANTAL_ATTR];
            for (int i = 0; i < res.length; i++) {
                for (int j = 0; j < res[i].length; j++) {
                    res[i][j][0] = spelbord[i][j].getGebied().name();
                    try {
                        res[i][j][1] = Integer.toString(spelbord[i][j].getSector().getSectorNr());
                    } catch (NullPointerException e) {
                        res[i][j][1] = "-1";
                    }
                    res[i][j][2] = spelbord[i][j].getSpeler().getKleur();
                    res[i][j][3] = Integer.toString(spelbord[i][j].getAantalKamelen());
                }
            }
            return res;
        }
    }

    /**
     * Retourneert de huidige spelers. De volgorde van de attributen is: naam,
     * kleur , sector, aantal geldstukken.
     *
     * @return 2D array van de spelers en relevante attributen.
     */
    public String[][] geefSpelers() {
        String[][] sp = new String[SpelerRepository.MAX_PLAYERS][Speler.NUM_OF_ATTR];
        Speler[] spelers = repo.getSpelers();
        for (int i = 0; i < SpelerRepository.MAX_PLAYERS; i++) {
            sp[i][0] = spelers[i].getNaam();
            sp[i][1] = spelers[i].getKleur();
            sp[i][2] = Integer.toString(spelers[i].getSector().getSectorNr());
            sp[i][3] = Integer.toString(spelers[i].getGeldstukken());
        }
        return sp;
    }

    /**
     * Retourneert het eindresultaat van een ronde
     *
     * @return array met de resultaten in stringvorm.
     */
    public String geefEindresultaatRonde() {
        return spel.geefEindresultaatRonde();
    }

}
