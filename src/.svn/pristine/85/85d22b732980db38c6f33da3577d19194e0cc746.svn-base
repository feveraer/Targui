package domein;

public class Spelbord {

    public static final int DIM = 7;
    public static final int NUM_OF_SECTORS = 4;
    public static final int VAKKEN_PER_SECTOR = 8;
    public static final int AANTAL_GEBIEDSKAARTEN = 53;
    private final Vak[][] vakken;
    private final Sector[] sectors;
    private final int[][] sectorenSpelbord
            = {
                {0, 0, 0, -1, 1, 1, 1},
                {0, 0, 0, -1, 1, 1, 1},
                {0, 0, -1, -1, -1, 1, 1},
                {-1, -1, -1, -1, -1, -1, -1},
                {2, 2, -1, -1, -1, 3, 3},
                {2, 2, 2, -1, 3, 3, 3},
                {2, 2, 2, -1, 3, 3, 3}
            };
    private final Gebiedskaart[] gebiedskaarten;

    public Spelbord() {
        sectors = new Sector[NUM_OF_SECTORS];
        for (int i = 0; i < NUM_OF_SECTORS; i++) {
            sectors[i] = new Sector();
        }
        vakken = new Vak[DIM][DIM];
        for (int i = 0; i < DIM; i++) {
            for (int j = 0; j < DIM; j++) {
                vakken[i][j] = new Vak();
                vakken[i][j].setSector(sectors[sectorenSpelbord[i][j]]);
            }
        }
        
        gebiedskaarten = new Gebiedskaart[AANTAL_GEBIEDSKAARTEN];
        gebiedskaarten[0] = new Zoutwinplaats();
        for (int i = 1; i < 5; i++) {
            gebiedskaarten[i] = new Nederzetting();
        }
        for (int i = 5; i < 11; i++) {
            gebiedskaarten[i] = new Guelta();
        }
        for (int i = 11; i < 23; i++) {
            gebiedskaarten[i] = new Erg();
        }
        for (int i = 23; i < 29; i++) {
            gebiedskaarten[i] = new Berg();
        }
        for (int i = 29; i < 41; i++) {
            gebiedskaarten[i] = new Reg();
        }
        for (int i = 41; i < 49; i++) {
            gebiedskaarten[i] = new FecheFeche();
        }
        for (int i = 49; i < AANTAL_GEBIEDSKAARTEN; i++) {
            gebiedskaarten[i] = new Zoutmeer();
        }

        vulSpelbord();
    }

    public Vak[][] geefSpelbord() {
        return vakken;
    }

    private void vulSpelbord() {
        // TODO - Algoritme spelbord
        throw new UnsupportedOperationException();
    }

}
