package gui;

import domain.DomainController;
import java.awt.Font;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/**
 * Test de use cases.
 *
 * @author Frederic Everaert
 * @author Gilles Baert
 * @author Jonas De Bruycker
 * @author Sander De Quick
 */
public class ConsoleApplication implements ChangeListener {

    DomainController dc;

    public ConsoleApplication(DomainController dc) {
        this.dc = dc;
        createPlayers();
        printAllPlayers();
    }

    private void createPlayers() {
        String name = "";
        String color;
        int sector;
        boolean[][] correctInput = new boolean[4][3];
        for (int i = 0; i < correctInput.length; i++) {
            for (int j = 0; j < correctInput[i].length; j++) {
                correctInput[i][j] = false;
            }
        }

        for (int i = 0; i < correctInput.length; i++) {
            try {
                while (!correctInput[i][0]) {
                    name = JOptionPane.showInputDialog(null, "Enter name player " + (i + 1));
                    dc.addPlayer(name);
                    correctInput[i][0] = true;
                }
                while (!correctInput[i][1]) {
                    color = JOptionPane.showInputDialog(null, "Enter color player " + (i + 1));
                    dc.setPlayerColor(name, color);
                    correctInput[i][1] = true;
                }
                while (!correctInput[i][2]) {
                    sector = Integer.parseInt(JOptionPane.showInputDialog(null, "Enter sector player " + (i + 1)));
                    dc.setPlayerSector(name, sector);
                    correctInput[i][2] = true;
                }
            } catch (IllegalArgumentException exp) {
                JOptionPane.showMessageDialog(null, exp.getMessage(), "Fout!", JOptionPane.ERROR_MESSAGE);
            }

        }
    }

    /**
     * Print 1 speler af naar stdout.
     *
     * @param speler
     */
    private void printPlayer(String[] speler) {
        System.out.printf("SPELER: %s\n"
                + "KLEUR: %s\n"
                + "SECTOR: %s\n"
                + "GELDSTKN: %s\n", speler[0], speler[1], speler[2], speler[3]);
        System.out.println("=====================");
    }

    private void printAllPlayers() {
        String[][] alleSpelers = dc.getPlayers();
        for (int i = 0; i < dc.getPlayers().length; i++) {
            printPlayer(alleSpelers[i]);
        }
    }

    /**
     * Print het spelbord voor opvulling ervan.
     */
//    private void printSpelVoorOpvulling() {
//        JTextArea tekstvak = new JTextArea();
//        tekstvak.setFont(new Font(Font.MONOSPACED, Font.PLAIN, 12));
//        String txt = "";
//        String[][][] spel = dc.geefSpel();
//        for (int i = 0; i < spel.length; i++) {
//            for (int j = 0; j < spel[i].length; j++) {
//                txt += String.format("[%2d]",
//                        Integer.parseInt(spel[i][j][0]) + 1);
//            }
//            txt += "\n";
//        }
//        tekstvak.setText(txt);
//        JOptionPane.showMessageDialog(null, tekstvak, "Targui", JOptionPane.PLAIN_MESSAGE);
//    }
    /**
     * Print het spelbord na opvulling ervan.
     */
//    private void printSpel() {
//        JTextArea tekstvak = new JTextArea();
//        tekstvak.setFont(new Font(Font.MONOSPACED, Font.PLAIN, 12));
//        String txt = "";
//        String[][][] spel = dc.geefSpel();
//        for (int i = 0; i < spel.length; i++) {
//            for (int j = 0; j < spel[i].length; j++) {
//                txt += String.format("[%10s %2d %10s %5s]",
//                        spel[i][j][0],
//                        Integer.parseInt(spel[i][j][1]) + 1,
//                        spel[i][j][2],
//                        spel[i][j][3]);
//            }
//            txt += "\n";
//        }
//        tekstvak.setText(txt);
//        JOptionPane.showMessageDialog(null, tekstvak, "Targui", JOptionPane.PLAIN_MESSAGE);
//    }
//    private void plaatsNederzettingenAlleSpelers() {
//        int vakX;
//        int vakY;
//
//        boolean[] juisteInvoer = {false, false, false, false};
//        for (int i = 0; i < PlayerRepository.MAX_PLAYERS; i++) {
//            while (!juisteInvoer[i]) {
//                try {
//                    vakX = Integer.parseInt(JOptionPane.showInputDialog("Geef X waarde nederzetting, Speler " + (i + 1)));
//                    vakY = Integer.parseInt(JOptionPane.showInputDialog("Geef Y waarde nederzetting, Speler " + (i + 1)));
//                    dc.plaatsNederzetting(i, vakX, vakY);
//                    juisteInvoer[i] = true;
//                } catch (IllegalArgumentException exp) {
//                    JOptionPane.showMessageDialog(null, exp.getMessage(), "Fout!", JOptionPane.ERROR_MESSAGE);
//                }
//            }
//        }
//    }
    @Override
    public void stateChanged(ChangeEvent e) {
        throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
    }
}
