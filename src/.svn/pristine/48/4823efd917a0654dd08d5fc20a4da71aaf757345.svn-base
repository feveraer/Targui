package gui;

import domain.DomainController;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/**
 *
 * @author Frederic
 */
public class GameJPanel extends JPanel implements ChangeListener {

    private BoardJPanel pnlBoard;
    private JButton btnInitBoard;
    private JButton btnSetRounds;
    private JButton btnPlay;
    private JLabel lblTxtNumberOfRounds;
    private JLabel lblNumberOfRounds;
    private JLabel lblTxtCurrentRound;
    private JLabel lblCurrentRound;
    private JLabel lblTxtNumberOfTurns;
    private JLabel lblNumberOfTurns;
    private JLabel lblTxtCurrentTurn;
    private JLabel lblCurrentTurn;
    private JScrollPane scrBoardInfo;
    private JTextArea txaBoardInfo;
    private DomainController dc;

    public GameJPanel(DomainController dc) {
        this.dc = dc;
        initComponents();
    }

    private void initComponents() {
        pnlBoard = new BoardJPanel(dc, this);
        scrBoardInfo = new JScrollPane();
        txaBoardInfo = new JTextArea();
        txaBoardInfo.setText("");
        txaBoardInfo.setEditable(false);
        scrBoardInfo.setViewportView(txaBoardInfo);
        btnInitBoard = new JButton("Initialize board");
        btnInitBoard.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                btnInitBoardActionPerformed();
            }
        });
        btnInitBoard.setEnabled(false);
        btnSetRounds = new JButton("Set rounds");
        btnSetRounds.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                btnSetRoundsActionPerformed();
            }
        });
        btnSetRounds.setEnabled(false);
        btnPlay = new JButton("Play");
        btnPlay.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                btnPlayActionPerformed();
            }
        });
        btnPlay.setEnabled(false);
        lblTxtNumberOfRounds = new JLabel("Total number of rounds: ");
        lblNumberOfRounds = new JLabel();
        lblTxtCurrentRound = new JLabel("Current round: ");
        lblCurrentRound = new JLabel();
        lblTxtNumberOfTurns = new JLabel("Number of turns this round: ");
        lblNumberOfTurns = new JLabel();
        lblTxtCurrentTurn = new JLabel("Current turn: ");
        lblCurrentTurn = new JLabel();

        GroupLayout layout = new GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                        .addComponent(pnlBoard, 630, 630, 630)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(btnInitBoard)
                                                .addComponent(btnSetRounds)
                                                .addComponent(btnPlay)
                                                .addComponent(scrBoardInfo)))
                                .addGroup(layout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addGroup(layout.createSequentialGroup()
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                .addComponent(lblTxtNumberOfRounds)
                                                                .addComponent(lblTxtCurrentRound))
                                                        .addGap(28, 28, 28)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                                                .addComponent(lblCurrentRound)
                                                                .addComponent(lblNumberOfRounds)))
                                                .addGroup(layout.createSequentialGroup()
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                .addComponent(lblTxtNumberOfTurns)
                                                                .addComponent(lblTxtCurrentTurn))
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                                .addComponent(lblCurrentTurn)
                                                                .addComponent(lblNumberOfTurns))))))
                        .addContainerGap())
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(pnlBoard, 630, 630, 630)
                .addGroup(layout.createSequentialGroup()
                        .addComponent(scrBoardInfo, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(28, 28, 28)
                        .addComponent(btnInitBoard)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnSetRounds)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnPlay)
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblTxtNumberOfRounds)
                                .addComponent(lblNumberOfRounds))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblTxtCurrentRound)
                                .addComponent(lblCurrentRound))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblTxtNumberOfTurns)
                                .addComponent(lblNumberOfTurns))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(lblTxtCurrentTurn)
                                .addComponent(lblCurrentTurn)))
        );

        setVisible(true);
    }

    public void activateBtnInitBoard() {
        btnInitBoard.setEnabled(true);
    }

    public void btnSetRoundsEnabled(boolean flag) {
        btnSetRounds.setEnabled(flag);
    }

    private void btnInitBoardActionPerformed() {
        String[][] allPlayers = dc.getPlayers();
        String[] allPlayerNames = new String[allPlayers.length];
        for (int i = 0; i < allPlayers.length; i++) {
            allPlayerNames[i] = allPlayers[i][0];
        }
        dc.newGame(allPlayerNames);
        pnlBoard.registerAsListener();
        dc.initBoard();
        new Thread(new Runnable() {
            @Override
            public void run() {
                try {
                    dc.populateBoard();
                    JOptionPane.showMessageDialog(null, "Choose the location of each player's settlement");
                    pnlBoard.setSettlementsEnabled(true);
                } catch (InterruptedException ex) {
                    Logger.getLogger(GameJPanel.class.getName()).log(Level.SEVERE, null, ex);
                }
            }
        }).start();
        btnInitBoard.setEnabled(false);
    }

    private void btnSetRoundsActionPerformed() {
        boolean correctInput = false;
        while (!correctInput) {
            try {
                dc.setupRounds(Integer.parseInt(JOptionPane.showInputDialog("Enter number of rounds")));
                correctInput = true;
            } catch (NumberFormatException exp) {
                JOptionPane.showMessageDialog(null, "Enter a number!", "Incorrect input", JOptionPane.ERROR_MESSAGE);
            } catch (IllegalArgumentException exp) {
                JOptionPane.showMessageDialog(null, exp.getMessage(), "Incorrect input", JOptionPane.ERROR_MESSAGE);
            }
        }
        btnSetRounds.setEnabled(false);
        lblNumberOfRounds.setText(Integer.toString(dc.getNumberOfRounds()));
        lblCurrentRound.setText(Integer.toString(dc.getCurrentRound()));
        lblNumberOfTurns.setText(Integer.toString(dc.getNumberOfTurns()));
        lblCurrentTurn.setText(Integer.toString(dc.getCurrentTurn()));
        dc.addRepoChangeListener(this);
        dc.addGameChangeListener(this);
        setBoardInfo();
        pnlBoard.setSquareMouseListeners();
        btnPlay.setEnabled(true);
    }

    private void btnPlayActionPerformed() {
        pnlBoard.showAllSquares(true);
        String[][] players = dc.getPlayers();
        String[] playerNames = new String[players.length];
        for (int i = 0; i < players.length; i++) {
            playerNames[i] = players[i][0];
        }
        String nextTurn = dc.getNextTurn();
//        if (nextTurn[1] != null) {
//            btnPlay.setEnabled(false);
//            JOptionPane.showMessageDialog(null, nextTurn[1] + " is the winner! Congratulations!");
//        } else {
            boolean matchesPlayer = false;
            for (String p : playerNames) {
                if (p.equals(nextTurn)) {
                    matchesPlayer = true;
                }
            }
            if (matchesPlayer) {
                JOptionPane.showMessageDialog(null, "It's " + nextTurn + "'s turn to move.");
                pnlBoard.showPlayerSquaresWithCamels(nextTurn);
                pnlBoard.setMovingEnabled(true);
            } else {
                JOptionPane.showMessageDialog(null, nextTurn);
            }
//        }
        lblCurrentRound.setText(Integer.toString(dc.getCurrentRound()));
        lblNumberOfTurns.setText(Integer.toString(dc.getNumberOfTurns()));
        lblCurrentTurn.setText(Integer.toString(dc.getCurrentTurn()));
    }

    public void setBoardInfo() {
        String boardInfoTxt = "";
        String[][][] board = dc.getBoard();
        for (int i = 0; i < 7; i++) {
            for (int j = 0; j < 7; j++) {
                boardInfoTxt += String.format("[%s, %s, %s, %d, %s, %s]  ",
                        board[i][j][0], board[i][j][1], board[i][j][2],
                        Integer.parseInt(board[i][j][3]) + 1, board[i][j][4], board[i][j][6]);
            }
            boardInfoTxt += "\n\n";
        }
        txaBoardInfo.setText(boardInfoTxt);
    }

    public void setBoardInfo(int sqX, int sqY) {
        String boardInfoTxt = "";
        String[][][] board = dc.getBoard();

        boardInfoTxt += String.format("REGION: %s\nECON VALUE: %s\nSTRAT VALUE: %s\nSECTOR: %d\nPLAYER: %s\nCAMELS: %s\n",
                board[sqX][sqY][0], board[sqX][sqY][1], board[sqX][sqY][2],
                Integer.parseInt(board[sqX][sqY][3]) + 1, board[sqX][sqY][4], board[sqX][sqY][6]);

        txaBoardInfo.setText(boardInfoTxt);
    }

    @Override
    public void stateChanged(ChangeEvent e) {
        setBoardInfo();
    }
}
