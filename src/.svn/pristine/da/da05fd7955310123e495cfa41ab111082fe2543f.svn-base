package domain;

import java.util.List;
import javax.swing.event.ChangeListener;

/**
 * DomainController of Targui. Gives access to the Game model and player
 * repository.
 *
 * @author Frederic Everaert
 * @author Gilles Baert
 * @author Jonas De Bruycker
 * @author Sander De Quick
 */
public class DomainController {

    private final PlayerRepository PLAYERREPO = new PlayerRepository();
    private Game game;

    public void addRepoChangeListener(ChangeListener l) {
        PLAYERREPO.addChangeListener(l);
    }

    public void removeRepoChangeListener(ChangeListener l) {
        PLAYERREPO.removeChangeListener(l);
    }

    public void addGameChangeListener(ChangeListener l) {
        game.addChangeListener(l);
    }

    public void removeGameChangeListener(ChangeListener l) {
        game.removeChangeListener(l);
    }

    public void addPlayer(String name, String color, int sector) {
        PLAYERREPO.addPlayer(name, color, sector);
    }

    public void setPlayerName(String oldName, String newName) {
        PLAYERREPO.setPlayerName(oldName, newName);
    }
    
    public int[][] getSectors() {
        return Board.getSectors();
    }

    public void setPlayerColor(String name, String color) throws IllegalArgumentException {
        if (!Color.contains(color.toUpperCase())) {
            throw new IllegalArgumentException("Unsupported color");
        }
        Color c = Color.valueOf(color.toUpperCase());
        PLAYERREPO.setPlayerColor(name, c);
    }

    public void setPlayerSector(String name, int sector) {
        PLAYERREPO.setPlayerSector(name, sector);
    }

    public void setPlayerSilver(String name, int silver) {
        PLAYERREPO.setPlayerSilver(name, silver);
    }

    public String[][][] getBoard() {
        if (game.getBoard() == null) {
            throw new NullPointerException("Board hasn't been initialized yet");
        }
        String[][][] res = new String[Board.DIM][Board.DIM][Square.NUM_OF_ATTR];
        Square[][] squares = game.getBoard().getSquares();
        for (int i = 0; i < squares.length; i++) {
            for (int j = 0; j < squares[i].length; j++) {
                try {
                    res[i][j][0] = squares[i][j].getRegion().name();
                } catch (NullPointerException exp) {
                    res[i][j][0] = "";
                }
                res[i][j][1] = Integer.toString(squares[i][j].getSector());
                res[i][j][3] = Integer.toString(squares[i][j].getCamels());
                try {
                    res[i][j][2] = squares[i][j].getPlayer().getColor().name();
                } catch (NullPointerException e) {
                    res[i][j][2] = "";
                }
            }
        }

        return res;
    }

    public String[][] getPlayers() {
        Player[] allPlayers = PLAYERREPO.getPlayers();
        String[][] p = new String[allPlayers.length][Player.NUM_OF_ATTR];
        for (int i = 0; i < allPlayers.length; i++) {
            p[i][0] = allPlayers[i].getName();
            try {
                p[i][1] = allPlayers[i].getColor().name();
            } catch (NullPointerException e) {
                p[i][1] = "";
            }
            p[i][2] = Integer.toString(allPlayers[i].getSector());
            p[i][3] = Integer.toString(allPlayers[i].getSilver());
        }
        return p;
    }
    
    public String[][] getGamePlayers() {
        Player[] l = game.getPlayers();
        String[][] p = new String[l.length][Player.NUM_OF_ATTR];
        for (int i = 0; i < l.length; i++) {
            p[i][0] = l[i].getName();
            try {
                p[i][1] = l[i].getColor().name();
            } catch (NullPointerException e) {
                p[i][1] = "";
            }
            p[i][2] = Integer.toString(l[i].getSector());
            p[i][3] = Integer.toString(l[i].getSilver());
        }
        return p;
    }

    public String[] getColors() {
        return Color.getColors();
    }
    
//    public void setNumberOfRounds(int number) {
//        game.setNumberOfRounds(number);
//    }
    
    public void newGame(String[] participants) throws UnsupportedOperationException, IllegalArgumentException {
        if (game != null) {
            throw new UnsupportedOperationException("A game is already in progress");
        }
        Player[] p = new Player[Game.MAX_PLAYERS];
        int check = 0;
        for (String participant : participants) {
            if (PLAYERREPO.containsPlayer(participant)) {
                p[check] = PLAYERREPO.getPlayer(participant);
                check++;
            }
        }
        if (check == Game.MAX_PLAYERS) {
            game = new Game(p);
        } else {
            throw new IllegalArgumentException("One or more participant names are invalid");
        }
    }
    
    public void initBoard() {
        game.initBoard();
    }
    
    public void populateBoard() throws InterruptedException {
        game.populateBoard();
    }
    
    public void setupRounds(int numberOfRounds) {
        game.setupRounds(numberOfRounds);
    }
    
    public void placeSettlement(String player, int x, int y) throws IllegalArgumentException {
        Player p = null;
        for (Player pl : PLAYERREPO.getPlayers()) {
            if (pl.getName().equals(player)) {
                p = pl;
            }
        }
        if (p != null) {
            game.placeSettlement(p, x, y);
        } else {
            throw new IllegalArgumentException("Invalid player name");
        }
    }

    public int getNumberOfTurns() {
        return game.getNumberOfTurns();
    }

    public String getNextTurn() {
        return game.getNextTurn();
    }

    public void move(String player, int xFrom, int yFrom, int xTo, int yTo) {
        throw new UnsupportedOperationException();
    }

    public void purchaseCamels(int x, int y, int numberOfCamels) {
        throw new UnsupportedOperationException();
    }

    public String[][] getSquaresByPlayer(String player) {
        throw new UnsupportedOperationException();
    }

    public String[][] getAdjacentSquares(int x, int y) {
        throw new UnsupportedOperationException();
    }

}
