package domain;

import java.util.HashMap;
import java.util.Map;
import utils.Collections;

/**
 * Represents the board.
 *
 * @author Frederic Everaert
 * @author Gilles Baert
 * @author Jonas De Bruycker
 * @author Sander De Quick
 */
class Board {

    public static final int DIM = 7;
    public static final int NUM_OF_SECTORS = 4;
    public static final int SQUARES_PER_SECTOR = 8;

    private final Map<Region, Integer> REGIONS_PER_TYPE = new HashMap<Region, Integer>() {
        {
            put(Region.SALTMINE, 1);
            put(Region.SETTLEMENT, 4);
            put(Region.GUELTA, 6);
            put(Region.ERG, 12);
            put(Region.MOUNTAIN, 6);
            put(Region.RAG, 12);
            put(Region.FESHFESH, 8);
            put(Region.SALTLAKE, 4);
        }
    };

    private final int[][] SECTORS
            = {
                {0, 0, 0, -1, 1, 1, 1},
                {0, 0, 0, -1, 1, 1, 1},
                {0, 0, -1, -1, -1, 1, 1},
                {-1, -1, -1, -1, -1, -1, -1},
                {2, 2, -1, -1, -1, 3, 3},
                {2, 2, 2, -1, 3, 3, 3},
                {2, 2, 2, -1, 3, 3, 3}
            };

    private final Model model;
    private final Square[][] squares;
    private Region[] regionShuffled;
    private int placedSettlements = 0;

    public Board(Model model) {
        this.model = model;
        squares = new Square[DIM][DIM];
        for (int i = 0; i < DIM; i++) {
            for (int j = 0; j < DIM; j++) {
                squares[i][j] = new Square(model);
                if (SECTORS[i][j] != -1) {
                    squares[i][j].setSector(SECTORS[i][j]);
                }
            }
        }
        populateBoard();
    }

    private void populateBoard() {
        regionShuffled = new Region[DIM * DIM - 1];
        int index = 0;
        for (Region r : Region.values()) {
            if (r != Region.SALTMINE && r != Region.SETTLEMENT) {
                int regionPerType = 0;
                while (regionPerType < REGIONS_PER_TYPE.get(r)) {
                    regionShuffled[index] = r;
                    regionPerType++;
                    index++;
                }
            }
        }
        Collections.shuffle(regionShuffled, 1);
        spiralAlgorithm();
    }

    private void spiralAlgorithm() {
        String direction = "R";
        int posX = squares.length / 2;
        int posY = squares.length / 2;
        boolean end = false;

        squares[posX][posY].setRegion(Region.SALTMINE);
        int index = 0;

        while (!end) {
            switch (direction) {
                case "L":
                    posY -= 1;

                    squares[posX][posY].setRegion(regionShuffled[index]);
                    index++;
                    if (squares[posX - 1][posY].getRegion() == null) {
                        direction = "U";
                    }
                    break;
                case "U":
                    posX -= 1;
                    squares[posX][posY].setRegion(regionShuffled[index]);
                    index++;
                    if (squares[posX][posY + 1].getRegion() == null) {
                        direction = "R";
                    }
                    break;
                case "R":
                    posY += 1;
                    if (posY >= squares.length) {
                        direction = "";
                        end = true;
                        break;
                    }
                    squares[posX][posY].setRegion(regionShuffled[index]);
                    index++;
                    if (squares[posX + 1][posY].getRegion() == null) {
                        direction = "D";
                    }
                    break;
                case "D":
                    posX += 1;
                    squares[posX][posY].setRegion(regionShuffled[index]);
                    index++;
                    if (squares[posX][posY - 1].getRegion() == null) {
                        direction = "L";
                    }
                    break;
            }
        }
    }

    public void placeSettlement(Player player, int x, int y) throws UnsupportedOperationException, IllegalArgumentException {
        if (x < 0 || x > DIM - 1 || y < 0 || y > DIM - 1) {
            throw new IllegalArgumentException("Coordinates out of bounds");
        }
        if (placedSettlements > REGIONS_PER_TYPE.get(Region.SETTLEMENT) - 1) {
            throw new UnsupportedOperationException("Maximum number of settlements placed");
        } else {
            squares[x][y].setRegion(Region.SETTLEMENT);
            model.fireStateChanged();
            placedSettlements++;
        }
    }

    public Square[][] getSquares() {
        return squares;
    }

}
