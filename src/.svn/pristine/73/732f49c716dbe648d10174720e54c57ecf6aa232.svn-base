package gui;

import domain.DomainController;
import java.awt.Color;
import java.awt.GridLayout;
import java.awt.Insets;
import java.awt.color.ColorSpace;
import java.awt.image.BufferedImage;
import java.lang.reflect.Field;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JPanel;
import javax.swing.SwingUtilities;
import javax.swing.border.LineBorder;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/**
 *
 * @author Frederic
 */
public class BoardJPanel extends JPanel implements ChangeListener {

    private DomainController dc;
    private JButton[][] btnSquares;

    public BoardJPanel(DomainController dc) {
        this.dc = dc;
        initComponents();
    }
    
    public void registerAsListener() {
        dc.addGameChangeListener(this);
    }

    private void initComponents() {
        int[][] sectors = dc.getSectors();
        btnSquares = new JButton[7][7];
        setLayout(new GridLayout(7, 7));
        setBorder(new LineBorder(Color.BLACK));

        Insets buttonMargin = new Insets(0, 0, 0, 0);
        for (int i = 0; i < btnSquares.length; i++) {
            for (int j = 0; j < btnSquares[i].length; j++) {
                JButton b = new JButton();
                b.setMargin(buttonMargin);
                ImageIcon icon = new ImageIcon(new BufferedImage(64, 64, BufferedImage.TYPE_INT_ARGB));
                b.setIcon(icon);
                //alternating background colors
//                if ((i % 2 == 1 && j % 2 == 1) || (i % 2 == 0 && j % 2 == 0)) {
//                    b.setBackground(new Color(255, 165, 0));
//                } else {
//                    b.setBackground(new Color(255, 140, 0));
//                }
                b.setBackground(new Color(238, 221, 130));
                btnSquares[i][j] = b;
                if (sectors[i][j] == -1) {
                    btnSquares[i][j].setText("");
                }
                else {
                    btnSquares[i][j].setText(Integer.toString(sectors[i][j] + 1));
                }
                add(btnSquares[i][j]);
            }
        }
        setVisible(true);
    }

    private void setSquareProperties() {
        String[][][] board = dc.getBoard();
        for (int i = 0; i < btnSquares.length; i++) {
            for (int j = 0; j < btnSquares[i].length; j++) {
                btnSquares[i][j].setText(board[i][j][0]);
                Color color;
                try {
                    Field field = Class.forName("java.awt.Color").getField(board[i][j][2]);
                    color = (Color) field.get(null);
                } catch (Exception e) {
                    color = new Color(238, 221, 130); // Not defined, no player on square
                }
                btnSquares[i][j].setBackground(color);
            }
        }
    }

    @Override
    public void stateChanged(ChangeEvent e) {
        setSquareProperties();
    }
}
