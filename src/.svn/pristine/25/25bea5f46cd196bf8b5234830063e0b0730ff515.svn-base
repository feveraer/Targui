package domain;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;
import java.util.Random;
import utils.Collections;

/**
 * Represents one complete game.
 *
 * @author Frederic Everaert
 * @author Gilles Baert
 * @author Jonas De Bruycker
 * @author Sander De Quick
 */
class Game extends Model {

    public static final int MAX_PLAYERS = 4;
    public static final int MAX_ROUNDS = 16;
    private final Player[] players;
    private Board board;
    private Fortune[] fortunes;
    private Round round;
    private int numberOfRounds;
    private int currentRound = 0;
    private int[] evaluationOfRound;
    private Player attackingPlayer;
    
    public Game(Player[] players) {
        this.players = players;
    }

    public void initBoard() {
        board = new Board(this);
        board.initSectors();
    }

    public void populateBoard() throws InterruptedException {
        board.populateBoard();
    }

    public void setupRounds(int numberOfRounds) {
        if (numberOfRounds < 1 || numberOfRounds > MAX_ROUNDS) {
            throw new IllegalArgumentException("Requires an integer between 1 and " + MAX_ROUNDS);
        }
        this.numberOfRounds = numberOfRounds;
        Fortune[] fortuneAll = new FortuneRepository(this).getFortunes();
        fortunes = Arrays.copyOfRange(fortuneAll, 0, numberOfRounds);
        Collections.shuffle(fortunes, 1);
        newRound();
    }

    private void newRound() throws UnsupportedOperationException {
        if (currentRound < numberOfRounds) {
            round = new Round(players, fortunes[currentRound]);
            resetRegionValuesOfRound();
            currentRound++;
        } else {
            throw new UnsupportedOperationException("Maximum number of rounds (" + numberOfRounds + ") reached");
        }
    }

    private void resetRegionValuesOfRound() {
        for (Region region : Region.values()) {
            region.resetCurrentValues();
        }
    }

    public void setEconValueOfRound(Region region, int econValue) {
        region.setCurrentEconValue(econValue);
        fireStateChanged();
    }

    public void setStratValueOfRound(Region region, int stratValue) {
        region.setCurrentStratValue(stratValue);
        fireStateChanged();
    }

    public String getVictor() {
        List<Player> stillStanding = stillStanding();
        if (stillStanding.size() == 1) {
            return stillStanding.get(0).getName();
        } else if (currentRound == numberOfRounds && round.getCurrentTurnNumber() == round.getNumberOfTurns()) {
//            evaluateRound();
//            for (int i = 0; i < MAX_PLAYERS; i++) {
//                players[i].setSilver(players[i].getSilver() + evaluationOfRound[i]);
//            }
            Player victor = players[0];
            for (int i = 1; i < players.length; i++) {
                if (players[i].getSilver() > victor.getSilver()) {
                    victor = players[i];
                }
            }
            return victor.getName();
        } else {
            return "";
        }
    }

    private List<Player> stillStanding() {
        List<Player> stillStanding = new ArrayList<>();
        Square[][] squares = board.getSquares();
        for (int pIndex = 0; pIndex < MAX_PLAYERS; pIndex++) {
            for (int i = 0; i < squares.length; i++) {
                for (int j = 0; j < squares[i].length; j++) {
                    try {
                        if (squares[i][j].getPlayer().equals(players[pIndex])) {
                            stillStanding.add(players[pIndex]);
                            j = squares[i].length - 1;
                            i = squares[i].length - 1;
                        }
                    } catch (NullPointerException exp) {
                        //no current player for square, do nothing
                    }
                }
            }
        }

        return stillStanding;
    }

    public Round getRound() {
        return round;
    }

    //returns all shuffled fortunes, length = numberOfRounds
    //to be called after the user set the number of rounds
    public Fortune[] getFortunes() {
        return fortunes;
    }

    public int getNumberOfRounds() {
        return numberOfRounds;
    }

    public int getCurrentRound() {
        return currentRound;
    }

    public int getCurrentTurn() {
        return round.getCurrentTurnNumber();
    }

    public int getNumberOfTurns() {
        return round.getNumberOfTurns();
    }

    public String getNextTurn() {
        try {
            return round.getNextTurn().toString();
        } catch (ArrayIndexOutOfBoundsException e) {
            newRound();
            return getNextTurn();
        }
    }

    public int[] evaluateRound() {
        evaluationOfRound = new int[MAX_PLAYERS];
        boolean[] hasSettlement = new boolean[MAX_PLAYERS];
        Square[][] squares = board.getSquares();
        for (int pIndex = 0; pIndex < evaluationOfRound.length; pIndex++) {
            hasSettlement[pIndex] = false;
            for (int i = 0; i < Board.DIM; i++) {
                for (int j = 0; j < Board.DIM; j++) {
                    //enkel zilver uitdelen aan speler als die nog zijn eigen nederzetting heeft
                    if ((squares[i][j].getRegion().equals(Region.SETTLEMENT)
                            && squares[i][j].getPlayer().getName().equals(players[pIndex].getName())
                            && squares[i][j].getSector() == squares[i][j].getPlayer().getSector())) {
                        hasSettlement[pIndex] = true;
                    }
                    try {
                        if (squares[i][j].getPlayer().equals(players[pIndex])) {
                            evaluationOfRound[pIndex] += squares[i][j].getRegion().getCurrentEconValue();
                        }
                    } catch (NullPointerException exp) {
                        //no player on current square, do nothing
                    }
                }
            }
            if (!hasSettlement[pIndex]) {
                evaluationOfRound[pIndex] = 0;
            }
        }
        for (int i = 0; i < MAX_PLAYERS; i++) {
            players[i].setSilver(players[i].getSilver() + evaluationOfRound[i]);
        }
        return evaluationOfRound;
    }

    public void placeSettlement(Player player, int x, int y) {
        board.placeSettlement(player, x, y);
    }

    public Board getBoard() {
        return board;
    }

    public Player[] getPlayers() {
        return players;
    }

    // Responsability of the GUI to make sure that the square indicated is effectively owned by Player p
    public void purchaseCamels(Player p, int x, int y, int numberOfCamels) {
        board.purchaseCamels(p, x, y, numberOfCamels);
    }

    public List<int[]> getAdjacentSquares(int x, int y) {
        return board.getAdjacentSquares(x, y);
    }
    
    // Responsability of the GUI to make sure that the square indicated is effectively owned by Player p
    public void move(Player player, int xFrom, int yFrom, int xTo, int yTo, int numberOfCamels) {
        board.move(player, xFrom, yFrom, xTo, yTo, numberOfCamels);
    }

    public void initiateAttack(Player player, int xFrom, int yFrom, int xTo, int yTo) {
        attackingPlayer = player;
        board.initiateAttack(player, xFrom, yFrom, xTo, yTo);
    }

    /**
     * battleStatus[0]: status of attack: 0 = attacking player won, 1 =
     * defending player held, 2 = both areas still have camels. battleStatus[1]:
     * Diceroll by attacking player. battleStatus[2]: Number of killed camels on
     * attacking square. battleStatus[3]: Diceroll by defending player.
     * battleStatus[4]: Number of killed camels on safe square.
     *
     * @param player
     * @param xTo
     * @param yTo
     * @return battleStatus
     */
    public int[] attack() {
        return board.attack(attackingPlayer);
    }

    public void moveCamelsAfterWonBattle(int numberOfCamels) {
        board.moveCamelsAfterWonBattle(attackingPlayer, numberOfCamels);
    }
}
