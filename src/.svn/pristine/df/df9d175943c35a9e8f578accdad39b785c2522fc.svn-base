package domein;

import java.util.ArrayList;
import java.util.Collections;
import java.util.List;

/**
 * Representeert één volledig spel.
 *
 * @author Frederic Everaert
 * @author Gilles Baert
 * @author Jonas De Bruycker
 * @author Sander De Quick
 */
public class Spel {

    public static enum KLEUREN {

        ROOD,
        GEEL,
        BLAUW,
        GROEN;
    }

    private final Spelbord spelbord = new Spelbord();
    private boolean spelbordGevuld = false;
    private int aantalRonden;
    private final int MAX_AANTAL_RONDEN = 16;
    private List<Integer> geschuddeNoodlotskaarten;
    private Actie[] noodlotskaartenActies;

    /**
     * Configuratie van het spelbord.
     */
    public void vulSpelbord() {
        spelbord.vulSpelbord();
        spelbordGevuld = true;
    }

    /**
     * Plaatst een gebiedskaart van het type nederzetting op een specifiek vak.
     *
     * @param speler Spelerobject
     * @param vakX X-coördinaat van het gewenste vak
     * @param vakY Y-coördinaat van het gewenste vak
     */
    public void plaatsNederzetting(Speler speler, int vakX, int vakY) {
        spelbord.plaatsNederzetting(speler, vakX, vakY);
    }

    /**
     * Legt het aantal ronden vast.
     *
     * @param aantalRonden
     */
    public void kiesAantalRonden(int aantalRonden) {
        if (aantalRonden < 0 || aantalRonden > MAX_AANTAL_RONDEN) {
            throw new IllegalArgumentException("Gelieve een geldig aantal ronden op te geven");
        } else {
            this.aantalRonden = aantalRonden;
        }
    }

    /**
     * Bepaalt array van noodlotskaarten a.d.h.v. het aantal gekozen ronden.
     */
    public void bepaalNoodlotskaarten() {
        geschuddeNoodlotskaarten = new ArrayList<>();
        for (int i = 0; i < aantalRonden; i++) {
            geschuddeNoodlotskaarten.add(i);
        }
        Collections.shuffle(geschuddeNoodlotskaarten);
    }

    /**
     *
     */
    public void vulActies(final Speler[] spelers) {
        for (int i = 0; i < MAX_AANTAL_RONDEN; i++) {
            noodlotskaartenActies[0] = new Actie() {
                @Override
                public String doeActie() {
                    Vak[][] vakken = spelbord.getVakken();
                    vakken[vakken.length / 2][vakken.length / 2].setAantalKamelen(0);
                    return "De Haussa, een vreemde, vijandige stam, overvalt de centrale zoutwinplaats en steelt er alle kamelen.";
                }
            };
            noodlotskaartenActies[1] = new Actie() {
                @Override
                public String doeActie() {
                    Vak[][] vakken = spelbord.getVakken();
                    for (int i = 0; i < vakken.length; i++) {
                        for (int j = 0; j < vakken[i].length; j++) {
                            if (vakken[i][j].getGebied().equals(Gebiedskaart.BERG)) {
                                vakken[i][j].getGebied().setEconWaarde(3);
                            }
                        }
                    }
                    return "In de bergen is zilver ontdekt. De schatting aan het eind van deze ronde is dan ook 3 voor elk bergengebied.";
                }
            };
            noodlotskaartenActies[2] = new Actie() {
                @Override
                public String doeActie() {
                    Vak[][] vakken = spelbord.getVakken();
                    for (int i = 0; i < vakken.length; i++) {
                        for (int j = 0; j < vakken[i].length; j++) {
                            if (vakken[i][j].getGebied().equals(Gebiedskaart.NEDERZETTING)) {
                                for (int k = 0; k < spelers.length; k++) {
                                    if (vakken[i][j].getMarkeringsteken().equals(spelers[k].getKleur())) {
                                        spelers[k].setGeldstukken(0);
                                    }
                                }
                            }
                        }
                    }
                    return "Een vijandelijke stam overvalt alle nederzettingen en gaat er met al het goud en zilver\n"
                            + "vandoor. Stammen zonder nederzettingen behouden hun geld.";
                }
            };
            noodlotskaartenActies[3] = new Actie() {
                @Override
                public String doeActie() {
                    Vak[][] vakken = spelbord.getVakken();
                    for (int i = 0; i < vakken.length; i++) {
                        for (int j = 0; j < vakken[i].length; j++) {
                            if (vakken[i][j].getGebied().equals(Gebiedskaart.GUELTA)) {
                                vakken[i][j].setAantalKamelen(vakken[i][j].getAantalKamelen() - 10);
                            }
                        }
                    }
                    return "";
                }
            };
            noodlotskaartenActies[4] = new Actie() {
                @Override
                public String doeActie() {
                    Vak[][] vakken = spelbord.getVakken();
                    for (int i = 0; i < vakken.length; i++) {
                        for (int j = 0; j < vakken[i].length; j++) {
                            if (vakken[i][j].getGebied().equals(Gebiedskaart.ERG)) {
                                vakken[i][j].getGebied().setStratWaarde(3);
                            }
                        }
                    }
                    return "";
                }
            };
            noodlotskaartenActies[5] = new Actie() {
                @Override
                public String doeActie() {
                    Vak[][] vakken = spelbord.getVakken();
                    for (int i = 0; i < vakken.length; i++) {
                        for (int j = 0; j < vakken[i].length; j++) {
                            if (vakken[i][j].getGebied().equals(Gebiedskaart.GUELTA)) {
                                vakken[i][j].setAantalKamelen(vakken[i][j].getAantalKamelen() + 5);
                            }
                        }
                    }
                    return "";
                }
            };
            noodlotskaartenActies[6] = new Actie() {
                @Override
                public String doeActie() {
                    Vak[][] vakken = spelbord.getVakken();
                    for (int i = 0; i < vakken.length; i++) {
                        for (int j = 0; j < vakken[i].length; j++) {
                            if (vakken[i][j].getGebied().equals(Gebiedskaart.REG)) {
                                vakken[i][j].setAantalKamelen(vakken[i][j].getAantalKamelen() - 5);
                            }
                        }
                    }
                    return "";
                }
            };
            noodlotskaartenActies[7] = new Actie() {
                @Override
                public String doeActie() {
                    Vak[][] vakken = spelbord.getVakken();
                    for (int i = 0; i < vakken.length; i++) {
                        for (int j = 0; j < vakken[i].length; j++) {
                            if (vakken[i][j].getAantalKamelen() > 0) {
                                vakken[i][j].setAantalKamelen(vakken[i][j].getAantalKamelen() - 1);
                            }
                        }
                    }
                    return "";
                }
            };
            noodlotskaartenActies[8] = new Actie() {
                @Override
                public String doeActie() {
                    throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                }
            };
            noodlotskaartenActies[9] = new Actie() {
                @Override
                public String doeActie() {
                    throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                }
            };
            noodlotskaartenActies[10] = new Actie() {
                @Override
                public String doeActie() {
                    throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                }
            };
            noodlotskaartenActies[11] = new Actie() {
                @Override
                public String doeActie() {
                    throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                }
            };
            noodlotskaartenActies[12] = new Actie() {
                @Override
                public String doeActie() {
                    throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                }
            };
            noodlotskaartenActies[13] = new Actie() {
                @Override
                public String doeActie() {
                    throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                }
            };
            noodlotskaartenActies[14] = new Actie() {
                @Override
                public String doeActie() {
                    throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                }
            };
            noodlotskaartenActies[15] = new Actie() {
                @Override
                public String doeActie() {
                    throw new UnsupportedOperationException("Not supported yet."); //To change body of generated methods, choose Tools | Templates.
                }
            };

        }

    }

    /**
     *
     * @return 2D array representatie van het spelbord
     */
    public Spelbord getSpelbord() {
        return spelbord;
    }

    /**
     *
     * @return is het spelbord al opgevuld of niet
     */
    public boolean isSpelbordGevuld() {
        return spelbordGevuld;
    }

}
